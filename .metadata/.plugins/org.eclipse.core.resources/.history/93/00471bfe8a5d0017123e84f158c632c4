package codeground;

import java.util.Scanner;
import java.util.Stack;


/*
   As the name of the class should be Solution , using Solution.java as the filename is recommended.
   In any case, you can execute your program by running 'java Solution' command.
 */
class SPPC_1_괄호 {
	static int Answer;
	static String S;
	public static void main(String args[]) throws Exception	{
		/*
		   The method below means that the program will read from input.txt, instead of standard(keyboard) input.
		   To test your program, you may save input data in input.txt file,
		   and call below method to read from the file when using nextInt() method.
		   You may remove the comment symbols(//) in the below statement and use it.
		   But before submission, you must remove the freopen function or rewrite comment symbols(//).
		 */		

		/*
		   Make new scanner from standard input System.in, and read data.
		 */
		Scanner sc = new Scanner(System.in);
		//Scanner sc = new Scanner(new FileInputStream("input.txt"));


		int T = Integer.valueOf(sc.nextLine());

		for(int test_case = 0; test_case < T; test_case++) {

			// Answer = 0;
			/////////////////////////////////////////////////////////////////////////////////////////////
			S = sc.nextLine();
			int N = S.length(); // 문자열의 길이
			int cnt = 0;  // 현재까지 나타난 올바른 닫는 괄호
			int max = 0; // 가장 긴 길이
			Stack<forStack> save = new Stack<>();  // 저장소
			char t;

			boolean reset = false;
			for(int i = 0; i<N;i++){
				t = S.charAt(i);
				forStack sasave;
				reset = false;

				if(!save.isEmpty()) sasave = save.peek();
				else sasave = null;

				switch (t){
				case '(':
				case '{':
				case '[':
					save.push(new forStack(t,i,cnt)); break;
				case '}':{
					if(sasave != null && sasave.c == '{'){
						cnt += 2;
						save.pop();
					}
					else reset = true;
					break;
				}
				case ')':{
					if(sasave != null && sasave.c == '('){
						cnt += 2;
						save.pop();
					}
					else reset = true;
					break;
				}
				case ']':{
					if(sasave != null && sasave.c == '['){
						cnt += 2;
						save.pop();
					}
					else reset = true;
					break;
				}
				}

				if(reset){  // 정산의 시간
					if(save.isEmpty()){   // 중간에 장애물 없음
						if(max < cnt) max = cnt;
					}
					else{  // 중간에 장애물 있었음
						int tempMax;
						tempMax = sasave.lengthSoFar > cnt - sasave.lengthSoFar ? sasave.lengthSoFar: cnt - sasave.lengthSoFar;

						if(tempMax > max) max = tempMax;
					}
					save.empty();
				}

			}

			Answer = max;
			/////////////////////////////////////////////////////////////////////////////////////////////


			// Print the answer to standard output(screen).
			System.out.println("Case #"+(test_case+1));
			System.out.println(Answer);
		}
	}

}

class forStack{
	char c;
	int index;
	int lengthSoFar;

	public forStack(char c, int index, int lengthSoFar) {
		super();
		this.c = c;
		this.index = index;
		this.lengthSoFar = lengthSoFar;
	}
}